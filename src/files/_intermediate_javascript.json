{
    "questions": [
      {
        "question": "What will the following code output: `console.log(0.1 + 0.2 === 0.3);`?",
        "options": ["true", "false", "undefined", "Error"],
        "answer": "false"
      },
      {
        "question": "How do you deep clone an object in JavaScript?",
        "options": ["Object.assign()", "JSON.stringify() and JSON.parse()", "Spread operator (...)", "clone()"],
        "answer": "JSON.stringify() and JSON.parse()"
      },
      {
        "question": "Which of the following is not a falsy value in JavaScript?",
        "options": ["null", "undefined", "NaN", "[]"],
        "answer": "[]"
      },
      {
        "question": "What is the result of the following expression: `[1, 2, 3] + [4, 5, 6]`?",
        "options": ["[1, 2, 3, 4, 5, 6]", "TypeError", "'1,2,34,5,6'", "undefined"],
        "answer": "'1,2,34,5,6'"
      },
      {
        "question": "What is the purpose of the `bind()` method in JavaScript?",
        "options": [
          "To permanently bind the context of 'this' in a function",
          "To execute a function immediately",
          "To create a new object",
          "To return a promise"
        ],
        "answer": "To permanently bind the context of 'this' in a function"
      },
      {
        "question": "What is the difference between `==` and `===` in JavaScript?",
        "options": [
          "`==` compares values, `===` compares both values and types",
          "`==` compares references, `===` compares values",
          "`==` is for numbers, `===` is for strings",
          "`==` is used for assignment, `===` is used for comparison"
        ],
        "answer": "`==` compares values, `===` compares both values and types"
      },
      {
        "question": "Which method is used to delay the execution of a function?",
        "options": ["setTimeout()", "setInterval()", "delay()", "clearTimeout()"],
        "answer": "setTimeout()"
      },
      {
        "question": "What is a closure in JavaScript?",
        "options": [
          "A function having access to its outer function's variables",
          "A function inside another function",
          "A function with no arguments",
          "A method for encapsulation"
        ],
        "answer": "A function having access to its outer function's variables"
      },
      {
        "question": "What does the `typeof` operator return for arrays?",
        "options": ["array", "object", "undefined", "function"],
        "answer": "object"
      },
      {
        "question": "What will the following code output: `console.log(typeof NaN);`?",
        "options": ["'number'", "'NaN'", "'undefined'", "'null'"],
        "answer": "'number'"
      },
      {
        "question": "What is the purpose of the `call()` method in JavaScript?",
        "options": [
          "To invoke a function with a specific 'this' value and arguments",
          "To assign variables in a function",
          "To bind 'this' value permanently",
          "To create a callback function"
        ],
        "answer": "To invoke a function with a specific 'this' value and arguments"
      },
      {
        "question": "What is the purpose of the `async` keyword in JavaScript?",
        "options": [
          "To define asynchronous functions that return promises",
          "To execute code synchronously",
          "To handle errors in promises",
          "To execute functions immediately"
        ],
        "answer": "To define asynchronous functions that return promises"
      },
      {
        "question": "How can you convert a string to a number in JavaScript?",
        "options": ["Number()", "parseInt()", "+", "All of the above"],
        "answer": "All of the above"
      },
      {
        "question": "Which of the following will stop event propagation in JavaScript?",
        "options": ["event.preventDefault()", "event.stopPropagation()", "event.cancel()", "event.stop()"],
        "answer": "event.stopPropagation()"
      },
      {
        "question": "What does the `Promise.all()` method do?",
        "options": [
          "Waits for all promises to resolve or any to reject",
          "Executes promises sequentially",
          "Waits for any promise to resolve first",
          "Runs promises without waiting"
        ],
        "answer": "Waits for all promises to resolve or any to reject"
      }
    ]
  }
  